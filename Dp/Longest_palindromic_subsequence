//Recursion-exponential
 int lcs(string &a,string &b,int m,int n){
        if(n<=0||m<=0)return 0;
        if(a[m-1]==b[n-1])return 1+lcs(a,b,m-1,n-1);
        return max(lcs(a,b,m-1,n),lcs(a,b,m,n-1));
    }
    int minInsertions(string s) {
        string p=s;
        reverse(s.begin(),s.end());
        int x=lcs(p,s,s.length(),s.length());
        return x;
    }
};
-------------------------------------------------------------------------
//Memoized-O(n*n)
 int dp[501][501];
    int lcs(string &a,string &b,int m,int n){
        if(n<=0||m<=0)return 0;
        if(dp[m][n]!=-1)return dp[m][n];
        if(a[m-1]==b[n-1])return  dp[m][n]=1+lcs(a,b,m-1,n-1);
        return  dp[m][n]=max(lcs(a,b,m-1,n),lcs(a,b,m,n-1));
    }
    int minInsertions(string s) {
        memset(dp,-1,sizeof(dp));
        string p=s;
        reverse(s.begin(),s.end());
        int x=lcs(p,s,s.length(),s.length());
        return x;
    }
    -------------------------------------------------------------------------
    //Tabulated-O(n*n)
    int lcs(string &a,string &b,int m,int n){
        if(n<=0||m<=0)return 0;
        int dp[m+1][n+1];
        for(int i=0;i<=m;i++){
        for(int j=0;j<=n;j++){
            if(i==0||j==0){dp[i][j]=0;continue;}
            if(a[i-1]==b[j-1])dp[i][j]=1+dp[i-1][j-1];
            else dp[i][j]=max(dp[i][j-1],dp[i-1][j]);
        }
        }
        return dp[m][n];
    }
    int minInsertions(string s) {
        string p=s;
        reverse(s.begin(),s.end());
        int x=lcs(p,s,s.length(),s.length());
        return x;
    } 
