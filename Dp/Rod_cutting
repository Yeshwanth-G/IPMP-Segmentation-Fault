//Recursive
  int answer(int price[],int n,int cap){
      if(n<=0){
          return 0;
      }
      if(n<=cap)
      return max(price[n-1]+answer(price,n,cap-n),answer(price,n-1,cap));
      else return answer(price,n-1,cap);
  }
    int cutRod(int price[], int n) {
        if(n<=0)return 0;
      return answer(price,n,n);
      
    }
-----------------------------------------------------------------------------
//Memoized-O(n*n)
int dp[1001][1001];
  int answer(int price[],int n,int cap){
      if(n<=0){
          return 0;
      }
      if(dp[n][cap]!=-1)return dp[n][cap];
      if(n<=cap)
      return dp[n][cap]= max(price[n-1]+answer(price,n,cap-n),answer(price,n-1,cap));
      else return dp[n][cap]=answer(price,n-1,cap);
  }
    int cutRod(int price[], int n) {
        if(n<=0)return 0;
        memset(dp,-1,sizeof(dp));
      return answer(price,n,n);
      
    }
-----------------------------------------------------------------------------
//2-D dp-O(n*n),O(n*n)
    int cutRod(int price[], int n) {
        if(n<=0)return 0;
  int dp[n+1][n+1];
        for(int i=0;i<=n;i++){
            for(int j=0;j<=n;j++){
                if(i==0||j==0){dp[i][j]=0;continue;}
                if(j>=i){
                    dp[i][j]=max(dp[i-1][j],price[i-1]+dp[i][j-i]);
                }
                else dp[i][j]=dp[i-1][j];
            }
        }
        return dp[n][n];
    }
    -------------------------------------------------------------------------
 //1-d dp-O(n*n),O(n)
  vector<int>dp;
  int answer(int price[],int i,int j){
      if(i>=j)return 0;
      int mx=0;
      if(dp[i]!=-1)return dp[i];
      for(int k=i+1;k<=j;k++){
          mx=max(mx,price[k-i-1]+answer(price,k,j));
      }
      return dp[i]=mx;
  }
    int cutRod(int price[], int n) {
        if(n<=0)return 0;
        dp=vector<int>(n+1,-1);
        return answer(price,0,n);}

--------------------------------------------------------------------------
