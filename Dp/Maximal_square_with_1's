//DP:O(n*m),O(n*m)
int maxSquare(int n, int m, vector<vector<int>> mat){
       if(n==1&&m==1)return mat[0][0]==1;
       int mx=0;
       for(int i=0;i<n;i++){
           for(int j=0;j<m;j++){
               int x=i-1>=0&&j-1>=0?mat[i-1][j-1]:0;
               int y=j-1>=0?mat[i][j-1]:0;
               int z=i-1>=0?mat[i-1][j]:0;
               if(mat[i][j])mat[i][j]=1+min(x,min(y,z));
               mx=max(mx,mat[i][j]);
           }
       }
       return mx;
    }
  --------------------------------------------------------------------------------------------------
    //Space optimised.-O(n*n),O(n);
    int maxSquare(int n, int m, vector<vector<int>> mat){
       if(n==1&&m==1)return mat[0][0]==1;
       int mx=0;
       int dp[m];
       for(int i=0;i<n;i++){
           int prev=0;
           for(int j=0;j<m;j++){
               if(i==0){dp[j]=mat[i][j];mx=max(mx,dp[j]);continue;}
               int x=dp[j];
               int y=j-1>=0?dp[j-1]:0;
               int z=prev;
               prev=x;
               if(mat[i][j])dp[j]=1+min(x,min(y,z));
               else dp[j]=0;
               mx=max(mx,dp[j]);
           }
       }
       return mx;
    }
    
