//Recursion-O(n*n)
int answer(vector<int>&nums,int s){
        if(s==nums.size()-1)return 0;
        if(s>=nums.size()||nums[s]==0)return INT_MAX;
        int mn=INT_MAX-1;
        for(int i=1;i<=nums[s];i++){
            
            mn=min(mn,answer(nums,i+s));
        }
        return mn+1;
    }
    int jump(vector<int>& nums) {
        int x=answer(nums,0);
        return x==INT_MAX?-1:x;
    }
----------------------------------------------------------
//Memoization-O(n)
class Solution {
public:
    int dp[100001];
    int answer(vector<int>&nums,int s){
        if(s==nums.size()-1)return 0;
        if(s>=nums.size()||nums[s]==0)return INT_MAX;
        if(dp[s]!=-1)return dp[s];
        int mn=INT_MAX-1;
        for(int i=1;i<=nums[s];i++){
            
            mn=min(mn,answer(nums,i+s));
        }
        return dp[s]=mn+1;
    }
    int jump(vector<int>& nums) {
        memset(dp,-1,sizeof(dp));
        int x=answer(nums,0);
        return x==INT_MAX?-1:x;
    }
};
----------------------------------------------------------
//tabulation-O(n)
int jump(vector<int>& nums) {
        nums.back()=0;
        int n=nums.size();
        for(int i=n-2;i>=0;i--){
            int mn=INT_MAX-1;
            for(int j=1;j<=nums[i];j++){
                if(i+j>=n)break;
                mn=min(mn,nums[i+j]);
            }
            nums[i]=mn+1;
        }
        return nums[0]==INT_MAX?-1:nums[0];
        
    }
-------------------------------------------------------
