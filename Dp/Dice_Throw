//Recursion-exponential
class Solution {
  public:
  long long answer(int m,int n,int x){
      if(n==0&&x==0)return 1;
      if(n==0||x==0)return 0;
      long long sum=0;
  for(int i=1;i<=m;i++){
      sum+=answer(m,n-1,x-i);
  }
  return sum;
  }
    long long noOfWays(int M , int N , int X) {
      return answer(M,N,X);
    }
};
----------------------------------------------------------------
//memoized-O(n*n)
class Solution {
  public:
  long long dp[51][51];
  long long answer(int m,int n,int x){
      if(n<0||x<0)return 0;
      if(n==0&&x==0)return 1;
      if(n==0||x==0)return 0;
      if(dp[n][x]!=-1)return dp[n][x];
      long long sum=0;
  for(int i=1;i<=m;i++){
      sum+=answer(m,n-1,x-i);
  }
  return dp[n][x]=sum;
  }
    long long noOfWays(int M , int N , int X) {
        memset(dp,-1,sizeof(dp));
      return answer(M,N,X);
    }
};
------------------------------------------------------------------
//2-D Tabulated
class Solution {
  public:
  long long dp[51][51];
  long long answer(int m,int n,int x){

  for(int i=0;i<=n;i++){ 
  for(int x1=0;x1<=x;x1++){
      if(i==0&&x1==0){dp[i][x1]=1;continue;}
      if(i==0||x1==0){dp[i][x1]=0;continue;}
      long long sum=0;
  for(int j=1;j<=m;j++){
      if(x1>=j)sum+=dp[i-1][x1-j];
  }
  dp[i][x1]=sum;
  }
  }
  return  dp[n][x];
  }
    long long noOfWays(int M , int N , int X) {
      return answer(M,N,X);
    }
};

------------------------------------------------------------------
//1-D Tabulated
class Solution {
  public:
  long long dp[51];
  long long answer(int m,int n,int x){

  for(int i=0;i<=n;i++){ 
  for(int x1=x;x1>=0;x1--){
      if(i==0&&x1==0){dp[x1]=1;continue;}
      if(i==0||x1==0){dp[x1]=0;continue;}
      long long sum=0;
  for(int j=1;j<=m;j++){
      if(x1>=j)sum+=dp[x1-j];
  }
  dp[x1]=sum;
  }
  }
  return  dp[x];
  }
    long long noOfWays(int M , int N , int X) {
      return answer(M,N,X);
    }
};
