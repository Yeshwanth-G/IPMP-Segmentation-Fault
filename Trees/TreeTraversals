PostOrder:
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int>ans;
        stack<TreeNode*>st;
        vector<int>v;
        if(root==NULL)return v;
          st.push(root);
        while(!st.empty()){
            TreeNode*p=st.top();
            st.pop();
            v.push_back(p->val);
            if(p->left)st.push(p->left);
            if(p->right)st.push(p->right);
        }
        reverse(v.begin(),v.end());
        return v;
        
    }
};//O(n),O(n)==>using two stacks;

PreOrder:
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int>v;
        stack<TreeNode*>st;
        if(root==NULL)return v;
        v.push_back(root->val);
        st.push(root);
        root=root->left;
        while(!st.empty()||root!=NULL){
            TreeNode*p=root;
            while(p!=NULL){
                v.push_back(p->val);
                st.push(p);
                p=p->left;
            }
            if(!st.empty()){
              root=st.top()->right;
                st.pop();
            }
        }
        return v;
    }
};//O(n),O(logn)or O(h);


Inorder:
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int>v;
        stack<TreeNode*>st;
        if(root==NULL)return v;
        st.push(root);
        root=root->left;
        while(!st.empty()||root!=NULL){
            TreeNode*p=root;
            while(p!=NULL){
                st.push(p);
                p=p->left;
            }
            if(!st.empty()){
            v.push_back(st.top()->val);
            root=st.top()->right;
            st.pop();}
        }
        return v;
    }
    
};//O(n),O(h)or O(logn);
------------------------------------------------------------------------------------------------------------
Morris Inorder:
//push the node when we second time see it.
vector<int> inorderTraversal(TreeNode* root) {
       TreeNode*cur=root;
        vector<int>v;
        while(cur!=nullptr){
        if(cur->left==nullptr){
            v.push_back(cur->val);
            cur=cur->right;
        }
        else{
            TreeNode*p=cur->left;
            while(p->right&&p->right!=cur){
                p=p->right;
            }
            if(!p->right){
                p->right=cur;
                cur=cur->left;
            }
            else{
                p->right=nullptr;
                v.push_back(cur->val);
                cur=cur->right;
            }
        }
        }
        return v;
    }//O(n),O(1)

------------------------------------------------------
Morris Preorder:
//same as inorder but push when we first see the node.
vector<int> preorderTraversal(TreeNode* root) {
        vector<int>v;
        TreeNode*cur=root;
        while(cur){
            if(cur->left==nullptr){
                v.push_back(cur->val);
                cur=cur->right;
            }
            else{
                TreeNode*p=cur->left;
                while(p->right&&p->right!=cur){
                    p=p->right;
                }
                if(!p->right){
                    v.push_back(cur->val);
                    p->right=cur;
                    cur=cur->left;
                }
                else{
                    p->right=nullptr;
                    cur=cur->right;
                }
            }
        }
        return v;
    }
-------------------------------------------------
Morris Postorder:
//same as prorder but just replace left by right and finally reverse vector.
vector<int> postorderTraversal(TreeNode* root) {
        vector<int>v;
        TreeNode*cur=root;
        while(cur){
            if(cur->right==nullptr){
                v.push_back(cur->val);
                cur=cur->left;
            }
            else{
                TreeNode*p=cur->right;
                while(p->left&&p->left!=cur){
                p=p->left;    
                }
                if(!p->left){
                    v.push_back(cur->val);
                    p->left=cur;
                    cur=cur->right;
                }
                else{
                    p->left=nullptr;
                    cur=cur->left;
                }
            }
        }
        reverse(v.begin(),v.end());
        return v;
    }
