//O(n^2)
void answer(Node*root,vector<vector<bool>>&adj){
		if(root==nullptr)return;
		answer(root->left,adj);
		answer(root->right,adj);
		int p=root->data;
		if(root->left){
		int x=root->left->data;
		for(int i=0;i<adj.size();i++){
			adj[p][i]=adj[x][i]||adj[p][i];
		}
		adj[p][x]=1;
	}
	if(root->right){
		int x=root->right->data;
		for(int i=0;i<adj.size();i++){
			adj[p][i]=adj[x][i]||adj[p][i];
		}
		adj[p][x]=1;
	}
	}
	
	int count(Node*root){
		if(root==nullptr)return 0;
		return 1+count(root->left)+count(root->right);
	}

	vector<vector<bool>> constructAncestorMatrix(Node* root)
	{
		int n=count(root);
		vector<vector<bool>>adj(n,vector<bool>(n,false));
		answer(root,adj);
		return adj;
	}
