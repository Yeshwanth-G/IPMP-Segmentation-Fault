class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        quicksort(nums,0,nums.size()-1);
        return nums;
    }
    void quicksort(vector<int>&nums,int l,int h){
         if(l<h){
             int pivot=partion(nums,l,h);
             quicksort(nums,l,pivot-1);
             quicksort(nums,pivot+1,h);
         }
    }
    int partion(vector<int>&nums,int l,int h){
        int i=l;
        int j=h;
        while(i<j){
        while(i<h&&nums[i]<=nums[l]){
            i++;
        }
        while(j>=0&&nums[j]>nums[l]){
            j--;
        }
        if(i<j){
            swap(nums[i],nums[j]);
        }
        }
        swap(nums[l],nums[j]);
        return j;
    }
};
Time:
=>best case:when array can be uniformly divided into halves-o(nlogn)
=>worst case:already sorted array-O(n^2).
Space Complexity:
=>O(n)-recursion stack.
