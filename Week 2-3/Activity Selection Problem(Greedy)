#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
//sorting the activities based on finishing time and choosing first activity and then at each point choosing the activity with minimum finishing time and having 
// starting time greater then or equalto the finishing time of earlier choosen activity
//-Greedy Approach-O(nlogn)-for sorting;
int main(){
int n,s,f;
cout<<"Enter number of activities:";
cin>>n;
cout<<"Enter starting and ending time of activities:\n";
vector<pair<int,int>>v;
for(int i=0;i<n;i++){
    cin>>s>>f;
pair<int,int>p=make_pair(f,s);
//p.first==>finishing time of activity,p.second==>starting time of activity;
v.push_back(p);
}
sort(v.begin(),v.end());
cout<<v[0].second<<" "<<v[0].first<<endl;
int j=0;
for(int i=1;i<n;i++){
    if(v[i].second>=v[j].first){
        cout<<v[i].second<<" "<<v[i].first<<endl;
        j=i;
    }
}
return 0;
}
