//Approach 0:directly sort the array;
//O(nlogn),O(1);
class Solution {
public:
    void sortColors(vector<int>& nums) {
        sort(nums.begin(),nums.end());
    }
};

//Approach 1 : count no. of 0's,1's,2's and then update the given array accordingly;
//O(N),O(1);
class Solution {
public:
    void sortColors(vector<int>& nums) {
int count0=0,count1=0,count2=0;
        int n=nums.size();
        for(int i=0;i<n;i++){
            if(nums[i]==0)count0++;
            if(nums[i]==1)count1++;
            if(nums[i]==2)count2++;
        }
        for(int i=0;i<n;i++){
            if(i<count0)nums[i]=0;
            else if(i<count0+count1)nums[i]=1;
            else nums[i]=2;
        }
    }
};
//Approach 2:Have 3 pointers l,h,m==>l points to location below which all elemets are 0 and h points to location above which all elements are 2
//and m is movable,if 0 is found at m swap it with l and if 2 is found swap it with h and if 1 is found just increase m;
//O(N),O(1)
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n=nums.size();
int l=0,m=0,h=n-1;
        while(m<=h){
            if(nums[m]==0){
                swap(nums[m],nums[l]);
                l++;
                m++;
            }
            else
            if(nums[m]==2){
                swap(nums[m],nums[h]);
                h--;
            }
            else
            if(nums[m]==1)m++;
        }
    }
};
