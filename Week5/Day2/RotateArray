//Approach 1:Make an auxilary array and push the last k elements and then push the 
//remaining elements maintaining same order==>O(n),O(n)
 class Solution {
    public:
    void rotate(vector<int>& nums, int k) {
        vector<int>v;
        int n=nums.size();
        k=k%n;
        for(int i=n-k;i<n;i++){
            v.push_back(nums[i]);
        }
        for(int i=0;i<n-k;i++){
            v.push_back(nums[i]);
        }
        nums=v;
    }
};

void rotate(vector<int>& nums, int k) {
//Approach 2:Rotate the array from n-k index to n-1 index and also rote the part of array from 0 index to n-k-1 index and 
//then rotate the entire array we will be left with the required rotated array; O(n),O(1) time;
    int n=nums.size();
    k=k%n;
    reverse(nums.begin(),nums.begin()+n-k);
    reverse(nums.begin()+n-k,nums.end());
    reverse(nums.begin(),nums.end());
}
