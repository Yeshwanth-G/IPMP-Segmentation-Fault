//Approach 1:Brute Force;
//Traverse given array and keep prefix sum(take 0 as -1 and 1 as 1,then problem reduces finding maximum subarray of sum 0) to find all subarrays having sum as 0 and take the maximum among them;
//Time:O(n*n),space:O(1)
class Solution{
  public:
    int maxLen(int a[], int N)
    {
        // Your code here
        int n=N;
        int count0=0,sum=0,max=0;
        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                if(a[j]==0)sum=sum+-1;
                else sum++;
                if(sum==0){
                    if((j-i)+1>max)max=(j-i)+1;
                }
            }
        }
        return max;
    }
};
//Approach 2:
//while traversing the array if we get the prefix sum as 1 two times then the numbers between those two indices sum to 0;
//so keep traversing the array and if you get sum as 0 then the subarray will be from starting point to present index 
//and when you get 1 then the subarray will be from the present index to the point where sum has becom 1 firstly..similarly for -1 also;
//O(n),O(n)
class Solution{
  public:
    int maxLen(int a[], int N)
    {
        int n=N;
        unordered_map<int,int>hmap;
        int sum=0;
        int p=0,max=0,size=0;
        for(int i=0;i<n;i++){
            if(a[i]==0)sum--;
            else sum++;
            if(sum==0){
                if(i+1>max)
                max=i+1;
            }
            else
            if(hmap.empty()||hmap.find(sum)==hmap.end()){
                hmap[sum]=i;
                
            }
            else{
               size=i-hmap[sum];
               if(size>max){
                   max=size;
               }
            }
        }
        return max;
    }
};

