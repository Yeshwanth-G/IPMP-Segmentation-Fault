pair<int,int> answer(TreeNode*root){
        if(!root) return {0,0};
        pair<int,int>l=answer(root->left);
        pair<int,int>r=answer(root->right);
        pair<int,int>p;
        p.first=max(l.first,r.first)+1;
        p.second=max({l.first+r.first,l.second,r.second});
        return p;
    }
    int diameterOfBinaryTree(TreeNode* root) {
        return answer(root).second;
    }
    //at every node 2 possiblities either pass through node-(lh+rh+1);
    else max(l_ans,r_ans);


-------------------------------------------------------------------
int height(Node*root,int&ans){
        if(root==nullptr)return 0;
        int lh=0,rh=0;
        int ld=height(root->left,lh);
        int rd=height(root->right,rh);
        ans=1+max(rh,lh);
        return max({ld,rd,(lh+rh+1)});
    }
int diameter(Node* root) {
int ans=0;
return height(root,ans);
}
