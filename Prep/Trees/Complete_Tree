full bt/strict bt -> all levels fileed
- bfs check leaves at same level
-simply fill bfs and break whenever you find a leaf and check the que should contain only leaves and size should be pow(2,h)-1;
- dfs to return (fullness,height) now if lc&&rc&&lh==rh then tree is complete..have a boolean refernce -> dp on trees
complete-> 
-bfs check if child is leaf, if its leaf then rest all should be leaves..
- dfs to return (fullness,hieght) now check conditions->have boolean variable to keep check whether tree is complete along the whole traversal ***imp model

pair<int,int> dfs(TreeNode*root,bool &bl){
        if(!root)return {1,0};
        pair<int,int>l=dfs(root->left,bl);
        pair<int,int>r=dfs(root->right,bl);
        int lc=l.first,lh=l.second,rc=r.first,rh=r.second;
        int h=max(lh,rh)+1;  // by the time you reach here left are claimed as complete and right are claimed as complete(complete may or maynot be full). 
        int c=0;
        if(rc&&!lc){
            if(lh-rh==1);
            else{
            bl=false;
            }
            c=0;
        }else if(rc&&lc){
            if(lh-rh==0)c=1;
            else if(lh-rh==1)c=0;
            else{
                c=0;
                bl=false;
            }
        }else if(!rc&&!lc){
            bl=false;
            c=0;
        }else if(!rc&&lc){
            if(lh==rh);
            else bl=false;
            c=0;
        }
        return {c,h};
    }
    bool isCompleteTree(TreeNode* root) {
        bool bl=true;
        dfs(root,bl);
        return bl;
    }
    
   ------------------
   //bfs
    bool isCompleteTree(TreeNode* root) {
        queue<TreeNode*>q;
        q.push(root);
        bool bl=false;
        while(!q.empty()){
            int sz=q.size();
            while(sz--){
                TreeNode*p=q.front();
                q.pop();
                if(bl){
                    if(p->right==nullptr&&p->left==nullptr)
                    continue;
                    else return false;
                }
                if(p->left==nullptr&&p->right!=nullptr)return false;
                else if(p->left==nullptr||p->right==nullptr){
                    bl=true;
                }
                    if(p->left)
                    q.push(p->left);
                    if(p->right)
                    q.push(p->right);
                
            }
        }
        return true;
    }
