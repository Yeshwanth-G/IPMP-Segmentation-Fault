//O(nlogn)------------------------------------------------------
TreeNode* sortedListToBST(ListNode* head) {
        if(head==null)return null;
        if(head->next==nullptr)return new TreeNode(head->val);
        ListNode*s=head,*f=head,*prev=nullptr;
        while(f&&f->next){
            prev=s;
            s=s->next;
            f=f->next->next;
        }
        TreeNode*root=new TreeNode(s->val);
        if(prev)prev->next=null;
        root->left=sortedListToBST(head);
        root->right=sortedListToBST(s->next);
        return root;
    } 
-----------------------------------------------------------------
//O(n)*************see compulsory.
    TreeNode* answer(ListNode*&head,int n){
        if(head==nullptr)return nullptr;
        if(n<=0)return null;
        TreeNode*l=answer(head,n/2);
        TreeNode*root=new TreeNode(head->val);
        root->left=l;
        head=head->next;
        root->right=answer(head,n-n/2-1);
        return root;
    }
    TreeNode* sortedListToBST(ListNode* head) {
        if(head==null)return null;
        int count=0;
        ListNode*p=head;
        while(head){head=head->next;count++;}
       return answer(p,count);
    }
