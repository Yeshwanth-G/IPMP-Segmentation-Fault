//Find pivot and apply binary search;
//Time:O(2*logn);
class Solution {
public:
    int pivot(vector<int>&v){
        int s=0,e=v.size()-1,mid;
        if(v[0]<v[v.size()-1])return -1;
        while(s<=e){
            mid=(s+e)/2;
            if(v[mid]<v[mid+1]){
                if(v[mid]>=v[0]){
                    s=mid+1;
                }
                else{
                    e=mid-1;
                }
            }
            else return mid;
        }
        return -1;
    }
    int binarysearch(vector<int>&v,int a,int b,int t){
        int mid;
        while(a<=b){
            mid=(a+b)/2;
            if(v[mid]==t)return mid;
            else if(t<v[mid])b=mid-1;
            else a=mid+1;
            
        }
        return -1;
    }
    int search(vector<int>& nums, int target) {
        if(nums.size()==1){
            if(target==nums[0])return 0;
            else return -1;
        }
     int p=pivot(nums);
        cout<<p;
            if(target<=nums.back())return binarysearch(nums,p+1,nums.size()-1,target);
            else{
               return binarysearch(nums,0,p,target);
            }
    }
    
};


//One Pass;Time:O(logn);
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int s=0,e=nums.size()-1,mid;
        while(s<=e){
            mid=(s+e)/2;
            if(nums[mid]==target)return mid;
            else if(nums[mid]>=nums[s]){
                if(target>=nums[s]&&target<nums[mid]){
                    e=mid-1;
                }
                else{
                    s=mid+1;
                }
            }
            else{
            if(target<=nums[e]&&target>nums[mid]){
                s=mid+1;
            }
                else
                    e=mid-1;
            }
        }
        return -1;
    }
};
