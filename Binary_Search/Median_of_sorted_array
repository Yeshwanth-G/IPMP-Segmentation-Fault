//binary search in answer
//we need to find the rightmost elemnt with no. of elements less than or equal to it is >=n/2;

int odmdn(vector<int>&a,vector<int>&b){
        int s=min(a.empty()?1e9:a[0],b.empty()?1e9:b[0]),e=max(a.empty()?-1e9:a.back(),b.empty()?-1e9:b.back());
        int ans=-1;
        int n=a.size(),m=b.size();
        while(s<=e){
            int mid=(e+s)/2;
            auto it1=upper_bound(a.begin(),a.end(),mid);
            auto it2=upper_bound(b.begin(),b.end(),mid);
            int nlse=(it1-a.begin())+(it2-b.begin());
            if(nlse>=(n+m+1)/2){
                ans=mid;
                e=mid-1;
            }else{
                s=mid+1;
            }
        }
        return ans;
    }
    double evmdn(vector<int>&a,vector<int>&b){
    int s=min(a.empty()?1e9:a[0],b.empty()?1e9:b[0]),e=max(a.empty()?-1e9:a.back(),b.empty()?-1e9:b.back());
        int ans=-1;
        int m1=odmdn(a,b);
        int n=a.size(),m=b.size();
        while(s<=e){
            int mid=(e+s)/2;
            auto it1=lower_bound(a.begin(),a.end(),mid);
            auto it2=lower_bound(b.begin(),b.end(),mid);
            int nls=(it1-a.begin())+(it2-b.begin());
            int nge=(n+m)-nls;
            if(nge>=((n+m)/2)){
                ans=mid;
                s=mid+1;
            }else{
                e=mid-1;
            }
        }
        return (m1+ans)/2.0;
    }
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n=nums1.size(),m=nums2.size();
        if((n+m)%2==0)return evmdn(nums1,nums2);
        else return odmdn(nums1,nums2);
    }
