//without duplicates.
int search(int v[], int s, int e, int key){
    //complete the function here
    while(s<=e){
        int mid=(s+e)/2;
        if(v[mid]==key)return mid;
        if(v[mid]>=v[s]){
            if(key<=v[mid]&&key>=v[s]){
                e=mid-1;
            }
            else s=mid+1;
        }
        else{
            if(key>=v[mid]&&key<=v[e]){
                s=mid+1;
            }
            else e=mid-1;
        }
    }
    return -1;
    }-O(logn)
-----------------------------------------------
//with duplicates.
int search(int v[], int s, int e, int key){
    //complete the function here
    while(s<=e){
        int mid=(s+e)/2;
        if(v[mid]==key)return mid;
        if(v[mid]==v[s]&&v[mid]==v[e]){
            s++;
            e--;
        }
        if(v[mid]>=v[s]){
            if(key<=v[mid]&&key>=v[s]){
                e=mid-1;
            }
            else s=mid+1;
        }
        else{
            if(key>=v[mid]&&key<=v[e]){
                s=mid+1;
            }
            else e=mid-1;
        }
    }
    return -1;
    }
 //worst case {1,1,1,1} and search for 3 it will take O(n)
 //O(n)in worst case and O(logn)in best case.
