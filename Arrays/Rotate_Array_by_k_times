//naive:k times shift each each elemt left
//O(k*n)
void rotateArr(int arr[], int k, int n){
        k=k%n;
     while(k--){
         int x=arr[0];
         for(int i=1;i<n;i++){
             arr[i-1]=arr[i];
         }
         arr[n-1]=x;}
     }
 ----------------------------------------------
 //using extra space
 //store first k elements and then shift each element by k and put the stored elements back again.
 //O(N),O(N)
 void rotateArr(int arr[], int k, int n){
        k=k%n;
     vector<int>temp;
     for(int i=0;i<k;i++)temp.push_back(arr[i]);
     for(int i=k;i<n;i++){
         arr[i-k]=arr[i];
     }
     int x=n-1;
     for(int i=temp.size()-1;i>=0;i--){
         arr[x--]=temp[i];
     }
    }
 ----------------------------------------------------------------------------------------------------
 //reverse first k then reverse next n-k,then reverse entire array.
 
 void rotateArr(int arr[], int k, int n){
        k=k%n;
     reverse(arr,arr+k);
     reverse(arr+k,arr+n);
     reverse(arr,arr+n);
    }
