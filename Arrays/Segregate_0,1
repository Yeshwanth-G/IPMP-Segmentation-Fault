//Approach 1:count0,count1
//O(N),O(1)
void segregate0and1(int arr[], int n) {
        int count0=0,count1=0;
        for(int i=0;i<n;i++){
            if(arr[i]==0){
                count0++;
            }
            else count1++;
        }
        for(int i=0;i<n;i++){
            if(count0!=0){
                arr[i]=0;
                count0--;
                continue;
            }
            else{
                arr[i]=1;
            }
        }
    }
----------------------------------------------------------------------------------------
//Approach two dutch flag or have two pointers starting at 0 and then keep swaping it
//O(N),O(1)
void segregate0and1(int arr[], int n) {
        int s=0;
        for(int i=0;i<n;i++){
            if(arr[i]==0){
                swap(arr[s++],arr[i]);
            }
        }
    }
 ---------------------------------------------------------------------------------------
//Two pointers-same as partition
//O(N),O(1)
void segregate0and1(int arr[], int n) {
        int s=0,e=n-1;
        while(s<e){
            while(arr[s]==0){
                s++;
            }
            while(arr[e]==1){
                e--;
            }
            if(s<e&&arr[s]==1&&arr[e]==0){
                swap(arr[s++],arr[e--]);
            }
        }
        
    }
