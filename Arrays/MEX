---------------------------------------------------------------------------------
//O(nlogn),O(1)
 int missingNumber(int arr[], int n) 
    { 
       sort(arr,arr+n);
       int missing=1;
       for(int i=0;i<n;i++){
           if(arr[i]==missing)missing++;
       }
       return missing;
        
    } 
----------------------------------------------------------------------------------
//O(N),O(N)
int missingNumber(int arr[], int n) 
    { 
       unordered_map<int,int>hmap;
       for(int i=0;i<n;i++){
           if(arr[i]>0)hmap[arr[i]]++;
       }
       for(int i=1;i<=n;i++){
           if(hmap.find(i)==hmap.end())return i;
       }
       return n+1;
        
    } 
----------------------------------------------------------------------------------
//optimised-problem is because we are having neagtive numbers.-O(N),O(1)
//so intially replace this neagitive elements by som huge value;
//now sincre there are only positibe nunbers go iterate array and if arr[i]<n make arr[arr[i]] as -ve if its positive;
//finally iterate through array and print index of first positive number.
int missingNumber(int arr[], int n) 
    { 
        int mx=INT_MAX;
       if(mx<0)return 1;
       for(int i=0;i<n;i++){
           if(arr[i]<=0)arr[i]=INT_MAX;
       }
       for(int i=0;i<n;i++){
           int v=abs(arr[i]);
           if(v<=n&&arr[v-1]>0)arr[v-1]=-arr[v-1];
       }
       for(int i=0;i<n;i++){
           if(arr[i]>0)return i+1;
       }
       return n+1;
        
    } 
