
  long long merge(long long arr[],int s1,int e1,int s2,int e2){
      long long inv=0;
      long long n1=e1-s1+1;
      long long n2=e2-s2+1;
      long long lft[n1];
      long long right[n2];
      int k=0;
      for(int i=s1;i<=e1;i++){
          lft[k++]=arr[i];
      }
      int k2=0;
      for(int i=s2;i<=e2;i++){
          right[k2++]=arr[i];
      }
      k=s1;
      int i=0,j=0;
      while(i<n1&&j<n2){
          if(lft[i]>right[j]){
              inv+=n1-i;
              arr[k++]=right[j++];
          }
          else{
              arr[k++]=lft[i++];
          }
      }
      while(i<n1)arr[k++]=lft[i++];
      while(j<n2)arr[k++]=right[j++];
      return inv;
  }
long long mergesort(long long arr[],int s,int e){
        long long inv=0;
      if(s<e){
        int mid=(s+e)/2;
        inv+=mergesort(arr,s,mid);
        inv+=mergesort(arr,mid+1,e);
        inv+=merge(arr,s,mid,mid+1,e);
    }
    return inv;
}
    long long int inversionCount(long long arr[], long long N)
    {
       return mergesort(arr,0,N-1);
    }

};
