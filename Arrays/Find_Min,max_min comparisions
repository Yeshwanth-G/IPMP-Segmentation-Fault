pair<long long,long long> answer(long long a[],int n){
    pair<long long,long long>ans;
    long long mn=INT_MAX,mx=INT_MIN;
    for(int i=0;i<n;i++){
        mn=min(a[i],mn);
        mx=max(a[i],mx);
    }
    ans.first=mn;
    ans.second=mx;
    return ans;
    
    
}//no. of comparisins=2*n
---------------------------------------------------------------------
//dividing into halfs.
pair<long long,long long> answer(long long a[],int s,int e){
    if(s>e)return {INT_MAX,INT_MIN};
    if(s==e){
        return {a[s],a[e]};
    }
    
    long long mid=s+(e-s)/2;
    pair<long long,long long>left=answer(a,s,mid);
    pair<long long,long long>rght=answer(a,mid+1,e);
    pair<long long,long long>ans;
    ans.first=min(left.first,rght.first);
    ans.second=max(left.second,rght.second);
    return ans;
}
pair<long long, long long> getMinMax(long long a[], int n) {
    return answer(a,0,n-1);
}
//C(n)=2C(n/2)+2;
//n-2 comparisions
----------------------------------------------------------------------
//selecting two pairs at a time
pair<long long,long long> answer(long long a[],int n){
    pair<long long,long long>ans;
    long long s=0;
    if(n%2==0){
        ans.first=min(a[0],a[1]);
        ans.second=max(a[0],a[1]);
        s=2;
    }else{
        ans.first=a[0];
        ans.second=a[0];
        s=1;
    }
    while(s<n-1){
      long long a1=a[s];
      long long a2=a[s+1];
      if(a1<a2){
          ans.first=min(a1,ans.first);
          ans.second=max(a2,ans.second);
      }else{
          ans.first=min(a2,ans.first);
          ans.second=max(a1,ans.second);
      }
       s=s+2; 
    }
    return ans;
    //no. of comparisins=3*(n-1)/2+2;=>3n/2+1/2
    
}
