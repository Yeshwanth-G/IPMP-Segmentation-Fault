//Since its Directed you no need to maintain parent
//do dfs and if you find a new visited vertex check if its in recursion stack if so return cycle present
bool dfs(vector<int>adj[],vector<int>&v,int s,vector<int>&helper){
        v[s]=true;
        helper[s]=true;
        for(int i=0;i<adj[s].size();i++){
            if(v[adj[s][i]]==false){
                if(dfs(adj,v,adj[s][i],helper))return true;
            }
	    else
            if(helper[adj[s][i]]==true)return true;
        }
        helper[s]=false;
        return false;
    }
    bool isCyclic(int V, vector<int> adj[]) {
        vector<int>visited(V,0),helper(V,false);
        for(int i=0;i<V;i++){
        if(!visited[i]){
        if(dfs(adj,visited,i,helper))return true;
        }
        }
        return false;
    }
----------------------------------------------------------------------------------------------------
 //Iterative
 bool isCyclic(int V, vector<int> adj[]) {
	   vector<int>visited(V,false),rec(V,false);
	   stack<int>st;
	   for(int i=0;i<V;i++){
	   if(visited[i]==false)
	   st.push(i);
	   while(!st.empty()){
	       int x=st.top();
	       if(visited[x]==true){
	           st.pop();
	           rec[x]=false;
	       }
	       else{
	           visited[x]=true;
	           rec[x]=true;
	       }
	       for(int i=0;i<adj[x].size();i++){
	           int p=adj[x][i];
	           if(visited[p]==false){st.push(p);rec[p]=true;}
	           else if(rec[p]==true)return true;
	       }
        }
	   }
        return false;
    }
----------------------------------------------------------------------------------------------------
//Using bfs-do toposort,if finally you can obtain toposort-no cycle else cycle present
bool isCyclic(int V, vector<int> adj[]) {
	   vector<int>toposort;
	   vector<bool>visited(V,false);
	  vector<int>indegree(V,0);
	  for(int i=0;i<V;i++){
	      for(int j=0;j<adj[i].size();j++){
	          indegree[adj[i][j]]++;
	      }
	  }
	  queue<int>q;
	  for(int i=0;i<indegree.size();i++){
	      if(indegree[i]==0){q.push(i);visited[i]=true;}
	  }
	  //no need to repaet for all disconnected components,its covered already as we are pushing nodes with indegree 0 intially only.
	  while(!q.empty()){
	      int x=q.front();
	      visited[x]=true;
	      q.pop();
	      toposort.push_back(x);
	      for(int i=0;i<adj[x].size();i++){
	          if(!visited[adj[x][i]]){
	              indegree[adj[x][i]]--;
	              if(indegree[adj[x][i]]==0)q.push(adj[x][i]);
	          }
	      }
	  }
	  return toposort.size()!=V;
    }
