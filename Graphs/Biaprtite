//Using DFS-O(n+e),O(n)
class Solution {
public:
bool dfs(vector<vector<int>>adj,vector<int>&color,int s){
    int cc=color[s]==1?2:1;
    for(int i=0;i<adj[s].size();i++){
        if(color[adj[s][i]]==0){
            color[adj[s][i]]=cc;
            if(dfs(adj,color,adj[s][i])==false)return false;
        }
        else {
            if(color[adj[s][i]]!=cc)return false;
        }
    }
    return true;
}
bool isBipartite(vector<vector<int>>& graph) {
    int n=graph.size();
    vector<int>color(n,0);
    for(int i=0;i<n;i++){
        if(color[i]==0)
        {
        color[i]=1;
        if(dfs(graph,color,i)==false)return false;
        }
    }
    return true;
}
    
};
----------------------------------------------------------------------------
//Using DFS
