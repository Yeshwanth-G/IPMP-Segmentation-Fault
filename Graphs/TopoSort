//DFS-O(n+e),O(n)+O(n)+O(n+e)
void dfs(vector<int>adj[],int i,vector<bool>&visited,stack<int>&stk){
	    visited[i]=1;
	    for(int j=0;j<adj[i].size();j++){
	        if(!visited[adj[i][j]])dfs(adj,adj[i][j],visited,stk);
	    }
	    stk.push(i);
	}
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	   vector<int>toposort;
	   vector<bool>visited(V,false);
	   stack<int>stk;
	   for(int i=0;i<V;i++){
	       if(visited[i]==false)dfs(adj,i,visited,stk);
	   }
	   while(!stk.empty()){
	       toposort.push_back(stk.top());
	       stk.pop();
	   }
	   return toposort;
	}
 ------------------------------------------------------------------------
 
 //Using Iterative dfs using covered array.
 
void dfs(vector<int>adj[],int i,vector<bool>&visited,stack<int>&stk){
	    stack<int>dfs;
	    dfs.push(i);
	   vector<bool>covered(visited.size(),false);
	    while(!dfs.empty()){
	        int k=dfs.top();
	        if(!visited[k])visited[k]=1;
	        else {if(!covered[k]){stk.push(k);covered[k]=true;}dfs.pop();continue;}
	        for(int j=0;j<adj[k].size();j++){
	            if(!visited[adj[k][j]])dfs.push(adj[k][j]);
	        }
	    }
	}
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	   vector<int>toposort;
	   vector<bool>visited(V,false);
	   stack<int>stk;
	   for(int i=0;i<V;i++){
	       if(visited[i]==false)dfs(adj,i,visited,stk);
	   }
	   while(!stk.empty()){
	       toposort.push_back(stk.top());
	       stk.pop();
	   }
	   return toposort;
	}
	
--------------------------------------------------------------------------------------------------

//Using iterative dfs without covered array-modifying visited array

void dfs(vector<int>adj[],int i,vector<bool>&visited,stack<int>&stk){
	    stack<int>dfs;
	    dfs.push(i);
	    
	   vector<bool>covered(visited.size(),false);
	    while(!dfs.empty()){
	        int k=dfs.top();
	        if(visited[k]==0)visited[k]=1;
	        else {if(visited[k]!=2){stk.push(k);visited[k]=2;}dfs.pop();continue;}
	        for(int j=0;j<adj[k].size();j++){
	            if(!visited[adj[k][j]])dfs.push(adj[k][j]);
	        }
	    }
	}
----------------------------------------------------------------------------------------------------

//Using bfs
vector<int> topoSort(int V, vector<int> adj[]) 
	{
	   vector<int>toposort;
	   vector<bool>visited(V,false);
	  vector<int>indegree(V,0);
	  for(int i=0;i<V;i++){
	      for(int j=0;j<adj[i].size();j++){
	          indegree[adj[i][j]]++;
	      }
	  }
	  queue<int>q;
	  for(int i=0;i<indegree.size();i++){
	      if(indegree[i]==0){q.push(i);visited[i]=true;}
	  }
	  //no need to repaet for all disconnected components,its covered already as we are pushing nodes with indegree 0 intially only.
	  while(!q.empty()){
	      int x=q.front();
	      visited[x]=true;
	      q.pop();
	      toposort.push_back(x);
	      for(int i=0;i<adj[x].size();i++){
	          if(!visited[adj[x][i]]){
	              indegree[adj[x][i]]--;
	              if(indegree[adj[x][i]]==0)q.push(adj[x][i]);
	          }
	      }
	  }
	  return toposort;
	}
