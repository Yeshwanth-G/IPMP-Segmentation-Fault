//take a 1 and apply dfs on all ones sorrounding it, in this a we can cover all ones in that connected component and repeat this untill all ones are visited
//and keep a track of connected components..can be done by bfs and dfs-O(n),O(n)
-----------------------------------------------------------------------------------------------------------------------------------
    void dfs(vector<vector<char>>& grid,int i,int j,vector<vector<int>>&visited){
        int n=grid.size();
        int m=grid[0].size();
        visited[i][j]=true;
        if(i+1<n&&grid[i+1][j]=='1'&&visited[i+1][j]==false)dfs(grid,i+1,j,visited);
        if(i+1<n&&j+1<m&&grid[i+1][j+1]=='1'&&visited[i+1][j+1]==false)dfs(grid,i+1,j+1,visited);
        if(i+1<n&&j-1>=0&&grid[i+1][j-1]=='1'&&visited[i+1][j-1]==false)dfs(grid,i+1,j-1,visited);
        if(i-1>=0&&grid[i-1][j]=='1'&&visited[i-1][j]==false)dfs(grid,i-1,j,visited);
        if(i-1>=0&&j-1>=0&&grid[i-1][j-1]=='1'&&visited[i-1][j-1]==false)dfs(grid,i-1,j-1,visited);
        if(i-1>=0&&j+1<m&&grid[i-1][j+1]=='1'&&visited[i-1][j+1]==false)dfs(grid,i-1,j+1,visited);
        if(j+1<m&&grid[i][j+1]=='1'&&visited[i][j+1]==false)dfs(grid,i,j+1,visited);
        if(j-1>=0&&grid[i][j-1]=='1'&&visited[i][j-1]==false)dfs(grid,i,j-1,visited);
    }
    int numIslands(vector<vector<char>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        int c=0;
        vector<vector<int>>visited(n,vector<int>(m,false));
        for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(grid[i][j]=='1'&&visited[i][j]==false){
                dfs(grid,i,j,visited);
                c++;
            }
        }
        }
        return c;
    }
