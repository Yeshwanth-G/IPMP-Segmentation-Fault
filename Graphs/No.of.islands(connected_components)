//take a 1 and apply dfs on all ones sorrounding it, in this a we can cover all ones in that connected component and repeat this untill all ones are visited
//and keep a track of connected components..can be done by bfs and dfs-O(n),O(n)
-----------------------------------------------------------------------------------------------------------------------------------
    void dfs(vector<vector<char>>& grid,int i,int j,vector<vector<int>>&visited){
        int n=grid.size();
        int m=grid[0].size();
        visited[i][j]=true;
        if(i+1<n&&grid[i+1][j]=='1'&&visited[i+1][j]==false)dfs(grid,i+1,j,visited);
        if(i+1<n&&j+1<m&&grid[i+1][j+1]=='1'&&visited[i+1][j+1]==false)dfs(grid,i+1,j+1,visited);
        if(i+1<n&&j-1>=0&&grid[i+1][j-1]=='1'&&visited[i+1][j-1]==false)dfs(grid,i+1,j-1,visited);
        if(i-1>=0&&grid[i-1][j]=='1'&&visited[i-1][j]==false)dfs(grid,i-1,j,visited);
        if(i-1>=0&&j-1>=0&&grid[i-1][j-1]=='1'&&visited[i-1][j-1]==false)dfs(grid,i-1,j-1,visited);
        if(i-1>=0&&j+1<m&&grid[i-1][j+1]=='1'&&visited[i-1][j+1]==false)dfs(grid,i-1,j+1,visited);
        if(j+1<m&&grid[i][j+1]=='1'&&visited[i][j+1]==false)dfs(grid,i,j+1,visited);
        if(j-1>=0&&grid[i][j-1]=='1'&&visited[i][j-1]==false)dfs(grid,i,j-1,visited);
    }
    int numIslands(vector<vector<char>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        int c=0;
        vector<vector<int>>visited(n,vector<int>(m,false));
        for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(grid[i][j]=='1'&&visited[i][j]==false){
                dfs(grid,i,j,visited);
                c++;
            }
        }
        }
        return c;
    }
---------------------------------------------------------------------------------------------------------------------------------------------------
//Using Union Find
int find_par(int x,vector<int>&parent){
    if(parent[x]==x)return x;
    return parent[x]=find_par(parent[x],parent);
}
void unionn(int a,int b,vector<int>&parent,vector<int>&rank){
int pa=find_par(a,parent);
int pb=find_par(b,parent);
if(pa!=pb){
    if(rank[pa]<rank[pb]){
        parent[pa]=pb;
    }
    else if(rank[pb]<rank[pa]){
        parent[pb]=pa;
    }
    else{
        parent[pb]=pa;
    }
}
}
int solve(vector<vector<int>>& friends) {
    int n=friends.size();
    vector<int>visited(friends.size(),false);
    vector<int>parent(n);
    for(int i=0;i<n;i++)parent[i]=i;
    vector<int>rank(n,0);
    for(int i=0;i<friends.size();i++){
        for(int j=0;j<friends[i].size();j++){
            unionn(i,friends[i][j],parent,rank);
        }
    }
    int c=0;
    for(int i=0;i<n;i++){
        if(parent[i]==i)c++;
    }
    return c;
}
