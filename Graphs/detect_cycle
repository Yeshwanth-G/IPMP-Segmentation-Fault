
----------------------------------------------------------------------------------------------------
//Using bfs-do toposort,if finally you can obtain toposort-no cycle else cycle present
bool isCyclic(int V, vector<int> adj[]) {
	   vector<int>toposort;
	   vector<bool>visited(V,false);
	  vector<int>indegree(V,0);
	  for(int i=0;i<V;i++){
	      for(int j=0;j<adj[i].size();j++){
	          indegree[adj[i][j]]++;
	      }
	  }
	  queue<int>q;
	  for(int i=0;i<indegree.size();i++){
	      if(indegree[i]==0){q.push(i);visited[i]=true;}
	  }
	  //no need to repaet for all disconnected components,its covered already as we are pushing nodes with indegree 0 intially only.
	  while(!q.empty()){
	      int x=q.front();
	      visited[x]=true;
	      q.pop();
	      toposort.push_back(x);
	      for(int i=0;i<adj[x].size();i++){
	          if(!visited[adj[x][i]]){
	              indegree[adj[x][i]]--;
	              if(indegree[adj[x][i]]==0)q.push(adj[x][i]);
	          }
	      }
	  }
	  return toposort.size()!=V;
    }
